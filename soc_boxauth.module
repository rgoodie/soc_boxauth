<?php

/**
 * @file soc_boxauth.module
 * TODO: Enter file description here.
 */


// Module name used in watchdog
define('SOC_BOXAUTH_MODULENAME', 'SOC BoxAuth');
define('SOC_BOXAUTH_MODDESC', 'Record necessary information points such as client_id and client_secret');

define('SOC_BOXAUTH_EXPIREOFFSET', 3000);   // arbitrary number of seconds before token needs to be redone


define('SOC_BOXAUTH_REDIRECTURI_VARIABLE', 'soc_boxauth_redirecturi');
define('SOC_BOXAUTH_CLIENTSECRET_VARIABLE', 'soc_boxauth_clientsecret');
define('SOC_BOXAUTH_CLIENTID_VARIABLE', 'soc_boxauth_clientid');
define('SOC_BOXAUTH_SUCCESSMESSAGE_VARIABLE', 'soc_boxauth_successmessage');
define('SOC_BOXAUTH_FAILUREMESSAGE_VARIABLE', 'soc_boxauth_failuremessage');
define('SOC_BOXAUTH_DEBUGSTATE_VARIABLE', 'soc_boxauth_debugstate');
define('SOC_BOXAUTH_RENEWTIME_VARIABLE', 'soc_boxauth_renewtime');

/**
 * Implements hook_menu().
 */

function soc_boxauth_menu() {


  // Oauth, part 1
  $items['do/box/auth'] = array(
    'title' => 'Send user to Box Auth',
    'page callback' => '_soc_boxauth_senduser_to_boxauth_content',
    'access arguments' => array('access do boxauth'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'soc_boxauth_form.inc.php',
  );

  // Oauth, part 2
  $items['get/box/code'] = [
    'title' => 'Recieving box code',
    'page callback' => '_soc_boxauth_get_code_from_box_handler',
    'access arguments' => ['access do boxauth'],
    'type' => MENU_CALLBACK,
    'file' => 'soc_boxauth_handler.inc.php',
  ];

  // config link
  $items['admin/config/system/box-auth'] = [
    'title' => t('Box API2 Settings (SOC)'),
    'page callback' => 'drupal_get_form',
    'page arguments' => ['soc_boxauth_admin'],
    'access arguments' => ['administer boxauth'],
    'file' => 'soc_boxauth.adminform.inc',
    'description' => t(SOC_BOXAUTH_MODDESC)
  ];

  // diagnositcs link
  $items['box/diagnostics/for/this/account'] = [
    'title' => t('Box Current Session'),
    'page callback' => '_soc_boxauth_diagnostics',
    'access arguments' => ['access do boxauth'],
    'file' => 'soc_boxauth.diagnostics.inc.php',
    'type' => MENU_CALLBACK,
  ];

  // force refresh
  $items['box/force/refresh'] = [
    'title' => t('Box force refresh token'),
    'page callback' => '_soc_boxauth_force_refresh_callback',
    'access arguments' => ['access do boxauth'],
    'type' => MENU_CALLBACK,
  ];

  // remove box auth from session
  // force refresh
  $items['box/stop/session'] = [
    'title' => t('Stop Box Session'),
    'page callback' => '_soc_boxauth_kill_session',
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
  ];



  // shortcuts
  $items['box/diag'] = $items['box/diagnostics/for/this/account'];

  return $items;
}

/**
 * removes box information from SESSION
 */
function _soc_boxauth_kill_session() {


  if (isset($_SESSION['box'])) {
    watchdog(SOC_BOXAUTH_MODULENAME, 'Attempting to unset box information in $_SESSION');
    unset($_SESSION['box']);
    return 'Box session closed';
  }
  else {
    watchdog(SOC_BOXAUTH_MODULENAME, 'No box in $_SESSION. No action taken');
    return 'No box information active. Nothing to do. ';
  }


}


function _soc_boxauth_force_refresh_callback() {
  //TODO: FIND OUT WHY THIS IS BREAKING
  _soc_boxauth_do_refresh_token();
  return 'test';
}

/**
 * Implements hook_permission().
 */
function soc_boxauth_permission() {
  return [
    'administer boxauth' => [
      'title' => t('Administer BOX AUTH settings'),
      'description' => t(SOC_BOXAUTH_MODDESC),
    ],
    'access do boxauth' => [
      'title' => t('Allow user to do Box Authentication'),
      'description' => t('Do not give this permission to an anonymous user role. '),

    ]
  ];
}


/**
 * Implements hook_page_alter().
 */
function soc_boxauth_page_alter(&$page) {


  // ensure we're set up properly
  if (user_is_logged_in()) {
    _soc_boxauth_startup_helper();
  }

  // determine if there is a need to refresh the token
  _soc_boxauth_determine_refresh_need();


  // If debug mode, show some interesting stuff
  if (variable_get(SOC_BOXAUTH_DEBUGSTATE_VARIABLE, FALSE) == TRUE && isset($_SESSION['box']['countdown'])) {
    // dpm($_SESSION['box']);
    drupal_set_message(t("Box access token dies in @min minutes", [
      '@min' => sprintf("%.0f", $_SESSION['box']['countdown'] / 60) | 0,
    ]));

  }
  else {
    drupal_set_message(t('Box session information does not exist. To turn off this message turn off Debug for soc_boxauth.'));
  }


}


/**
 * A helper function that determines if the auth_token is about to expire and
 * if it is -- with in defined parameters, then it calls _soc_boxauth_do_refresh_token
 */

function _soc_boxauth_determine_refresh_need() {


  // If we have an access token, see how much time is left on it. If it's soon
  // to expire, then we should just send renew.
  if (isset ($_SESSION['box']) && isset($_SESSION['box']['access_token'])) {
    $_SESSION['box']['countdown'] = $_SESSION['box']['expires_time'] - time();

    // Do we need to renew the token? This is defined by the count down being
    // great than 0 but less than our renewal time.
    if ($_SESSION['box']['countdown'] < (variable_get(SOC_BOXAUTH_RENEWTIME_VARIABLE) * 60)) {

      // log 'two-minute' warning
      watchdog(SOC_BOXAUTH_MODULENAME, "Access token needs to be refreshed ", $_SESSION['box']['countdown']);

      // if it hasn't completly expired, do the behind-the-scenes renewal
      if ($_SESSION['box']['countdown'] > 0) {
        watchdog(SOC_BOXAUTH_MODULENAME, "Doing token refresh", $_SESSION['box']);
        _soc_boxauth_do_refresh_token();
      }

      // If it is just too old, just unset() the SESSION['box']
      else {
        watchdog(SOC_BOXAUTH_MODULENAME, "Unsetting session['box']", $_SESSION['box']);
        unset($_SESSION['box']);
      }
    }
  }
}

/**
 * A renew function that can be called from various hooks. It offers the
 * refresh token to box, to regenerate the access_token and refresh token.
 * @return bool
 */

function _soc_boxauth_do_refresh_token() {





  // skip if there is no refresh token in hand
  if (!isset($_SESSION['box']['refresh_token'])) {
    watchdog(SOC_BOXAUTH_MODULENAME, t('No refresh token present'));
    return FALSE;
  }

  // Build Query for a token refresh
  $d = http_build_query([
    'grant_type' => 'refresh_token',
    'refresh_token' => $_SESSION['box']['refresh_token'],
    'client_id' => variable_get(SOC_BOXAUTH_CLIENTID_VARIABLE),
    'client_secret' => variable_get(SOC_BOXAUTH_CLIENTSECRET_VARIABLE),
  ]);


  // Execute POST
  $result = drupal_json_decode(
    file_get_contents(
      "https://app.box.com/api/oauth2/token",
      FALSE,
      stream_context_create([
        'http' => [
          'method' => 'POST',
          'header' => 'Content-type: application/x-www-form-urlencoded',
          'content' => $d,
        ]
      ])
    )
  );

  // If good result, store new values in SESSION and
  // recalculate the expires time.

  if (isset($result->access_token)) {
    $_SESSION['box'] = $result;
    $_SESSION['box']['expires_time'] = time() + SOC_BOXAUTH_EXPIREOFFSET;
  }

  else {
    watchdog(SOC_BOXAUTH_MODULENAME, 'Difficulty renewing the token');
  }


  return true;
}


/**
 * Checks to ensure a few things are inline before we get going
 */
function _soc_boxauth_startup_helper() {

  $variables = [
    SOC_BOXAUTH_CLIENTID_VARIABLE,
    SOC_BOXAUTH_RENEWTIME_VARIABLE,
    SOC_BOXAUTH_CLIENTSECRET_VARIABLE,
  ];

  foreach ($variables as $var) {
    // are variables empty?
    if (variable_get($var, '') == '') {
      drupal_set_message(
        t('The necessary <b>@configuration</b> variable for this module is not set. Please !link. Or contact a site administrator. ', [
          '@configuration' => $var,
          '!link' => l('configure this setting now', 'admin/config/system/box-auth'),
        ]),
        'error',
        FALSE
      );
    }
  }


  return TRUE;


}

